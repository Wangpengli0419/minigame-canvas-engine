(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{372:function(t,a,r){"use strict";r.r(a);var e=r(45),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),r("p",[t._v("当我们开发一个canvas应用的时候，出于效率的考量，免不了要选择一个渲染引擎（比如"),r("strong",[t._v("PixiJS")]),t._v(")或者工具链更完备的游戏引擎（比如"),r("strong",[t._v("Cocos Creator")]),t._v("、"),r("strong",[t._v("Layabox")]),t._v(")。")]),t._v(" "),r("p",[t._v("渲染引擎通常会有Sprite的概念，一个完整的界面会由很多的Sprite组成，如果编写复杂一点的界面，代码里面会充斥创建精灵、设置精灵位置和样式的“重复代码”，最终我们得到了极致的渲染性能却牺牲了代码的可读性。")]),t._v(" "),r("p",[t._v("为了解决这个问题，游戏引擎通常会有配套的IDE，界面通过拖拽即可生成，最终导出场景配置文件，这大大方便了UI开发，但是游戏引擎一般都很庞大，有时候我们仅仅想开发个好友排行榜。")]),t._v(" "),r("p",[t._v("如果有一款渲染引擎，既能用配置文件的方式来表达界面，又可以做到轻量级，将会大大满足我们开发轻量级 canvas 应用的场景，minigame-canvas-engine 应运而生(后面简称 "),r("strong",[t._v("Layout")]),t._v(" )")]),t._v(" "),r("p",[t._v("有兴趣可以查看详细原理介绍"),r("a",{attrs:{href:"https://segmentfault.com/a/1190000021297495?_ea=27021986",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"web端调试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web端调试"}},[t._v("#")]),t._v(" web端调试")]),t._v(" "),r("p",[t._v("为了方便UI调试，可以在线编辑预览效果: "),r("a",{attrs:{href:"https://wechat-miniprogram.github.io/minigame-canvas-engine/playground.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Playground"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"效果预览"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#效果预览"}},[t._v("#")]),t._v(" 效果预览")]),t._v(" "),r("img",{attrs:{src:t.$withBase("/imgs/screenshot.gif"),width:"300"}}),t._v(" "),r("h2",{attrs:{id:"谁在使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#谁在使用"}},[t._v("#")]),t._v(" 谁在使用")]),t._v(" "),r("p",[t._v("小游戏官方示例")]),t._v(" "),r("img",{attrs:{src:t.$withBase("/imgs/demo.png"),width:"200"}})])}),[],!1,null,null,null);a.default=s.exports}}]);